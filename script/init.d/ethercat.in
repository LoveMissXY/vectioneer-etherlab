#!/bin/sh

#------------------------------------------------------------------------------
#
#  Init script for EtherCAT
#
#  $Id$
#
#  Copyright (C) 2006-2008  Florian Pose, Ingenieurgemeinschaft IgH
#
#  This file is part of the IgH EtherCAT Master.
#
#  The IgH EtherCAT Master is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License version 2, as
#  published by the Free Software Foundation.
#
#  The IgH EtherCAT Master is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with the IgH EtherCAT Master; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#  ---
#
#  The license mentioned above concerns the source code only. Using the EtherCAT
#  technology and brand is only permitted in compliance with the industrial
#  property and similar rights of Beckhoff Automation GmbH.
#
#  vim: expandtab
#
#------------------------------------------------------------------------------

### BEGIN INIT INFO
# Provides:          ethercat
# Required-Start:    $local_fs $syslog $network
# Should-Start:      $time ntp
# Required-Stop:     $local_fs $syslog $network
# Should-Stop:       $time ntp
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: EtherCAT master
# Description:       EtherCAT master @VERSION@
### END INIT INFO

#------------------------------------------------------------------------------

LSMOD=/sbin/lsmod
MODPROBE=/sbin/modprobe
RMMOD=/sbin/rmmod
MODINFO=/sbin/modinfo
ETHERCAT=@prefix@/bin/ethercat
MASTER_ARGS=

#------------------------------------------------------------------------------

BIND_IGNORES=( 'ccat' 'ccat_netdev' )
BIND_DEVICES=/var/lib/ethercat/binded_devices

#------------------------------------------------------------------------------

ETHERCAT_CONFIG=/etc/ethercat.conf

if [ ! -r ${ETHERCAT_CONFIG} ]; then
    echo ${ETHERCAT_CONFIG} not existing;
    if [ "${1}" = "stop" ]; then
        exit 0
    else
        exit 6
    fi
fi

. ${ETHERCAT_CONFIG}

#------------------------------------------------------------------------------

exit_success() {
    if [ -r /etc/rc.status ]; then
        rc_reset
        rc_status -v
        rc_exit
    else
        echo " done"
        exit 0
    fi
}

#------------------------------------------------------------------------------

exit_fail() {
    if [ -r /etc/rc.status ]; then
        rc_failed
        rc_status -v
        rc_exit
    else
        echo " failed"
        exit 1
    fi
}

#------------------------------------------------------------------------------

print_running() {
    if [ -r /etc/rc.status ]; then
        rc_reset
        rc_status -v
    else
        echo " running"
    fi
}

#------------------------------------------------------------------------------

print_dead() {
    if [ -r /etc/rc.status ]; then
        rc_failed
        rc_status -v
    else
        echo " dead"
    fi
}

#------------------------------------------------------------------------------

parse_mac_address() {
    if [ -z "${1}" ]; then
        MAC=""
    elif echo ${1} | grep -qE '^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$'; then
        MAC=${1}
    else
        echo Invalid MAC address \"${1}\" in ${ETHERCAT_CONFIG}
        exit_fail
    fi
}

#------------------------------------------------------------------------------

contains_element () {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

#------------------------------------------------------------------------------

if [ -r /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

case "${1}" in

start)
    echo -n "Starting EtherCAT master @VERSION@ "

    # get device name <-> mac address mapping
    declare -A ND_MAC2NAME;
    declare -A ND_NAME2MAC;
    for ND_NAME in $(basename -a /sys/class/net/*); do
        ND_MAC=$(cat /sys/class/net/${ND_NAME}/address 2> /dev/null)
        ND_MAC2NAME["${ND_MAC,,}"]="${ND_NAME}"
        ND_NAME2MAC["${ND_NAME}"]="${ND_MAC,,}"
    done

    # construct DEVICES and BACKUPS from configuration variables
    DEVICES=""
    BACKUPS=""
    MASTER_INDEX=0
    while true; do
        DEVICE=$(eval echo "\${MASTER${MASTER_INDEX}_DEVICE}")
        BACKUP=$(eval echo "\${MASTER${MASTER_INDEX}_BACKUP}")
        if [ -z "${DEVICE}" ]; then break; fi

        if [ ${MASTER_INDEX} -gt 0 ]; then
            DEVICES=${DEVICES},
            BACKUPS=${BACKUPS},
        fi

        # assume the input is a mac-address (1st) or device name (2nd)
        DEVICE_NAME="${ND_MAC2NAME[${DEVICE,,}]}"
        if [ -z "${DEVICE_NAME}" ]; then
            DEVICE_MAC="${ND_NAME2MAC[${DEVICE}]}"
            if [ ! -z "${DEVICE_MAC}" ]; then
                DEVICE_NAME="${DEVICE}"
                DEVICE="${DEVICE_MAC}"
            fi
        fi

        if [ ! -z "${BACKUP}" ]; then
            BACKUP_NAME="${ND_MAC2NAME[${BACKUP,,}]}"
            if [ -z "${BACKUP_NAME}" ]; then
                BACKUP_MAC="${ND_NAME2MAC[${BACKUP}]}"
                if [ ! -z "${BACKUP_MAC}" ]; then
                    BACKUP_NAME="${BACKUP}"
                    BACKUP="${BACKUP_MAC}"
                fi
            fi
        fi
        
        parse_mac_address ${DEVICE}
        DEVICES=${DEVICES}${MAC}

        parse_mac_address ${BACKUP}
        BACKUPS=${BACKUPS}${MAC}
        
        if [ ! -z "${DEVICE_NAME}" ]; then
            ip link set ${DEVICE_NAME} arp off
            ip link set ${DEVICE_NAME} up
        fi

        if [ ! -z "${BACKUP_NAME}" ]; then
            ip link set ${BACKUP_NAME} arp off
            ip link set ${BACKUP_NAME} up
        fi

        MASTER_INDEX=$(expr ${MASTER_INDEX} + 1)
    done

    # Set link state UP on selected devices
    if [ -n "${LINK_DEVICES}" ]; then
        for LINK_DEVICE in ${LINK_DEVICES}; do
            ip link set ${LINK_DEVICE} up
        done
    fi

    # build EOE interfaces command
    EOE_INTERFACES_CMD=""
    for IFACE in ${EOE_INTERFACES}; do
        if [ -z "${EOE_INTERFACES_CMD}" ]; then
            EOE_INTERFACES_CMD="eoe_interfaces=${IFACE}"
        else
            EOE_INTERFACES_CMD="${EOE_INTERFACES_CMD},${IFACE}"
        fi
    done

    # build EOE auto create command
    EOE_AUTOCREATE_CMD=""
    if [ -n "${EOE_AUTOCREATE}" ]; then
        EOE_AUTOCREATE_CMD="eoe_autocreate=${EOE_AUTOCREATE}"
    fi

    # build pcap command
    PCAP_SIZE_CMD=""
    if [ -n "${PCAP_SIZE_MB}" ]; then
        PCAP_SIZE_CMD="pcap_size=$(expr ${PCAP_SIZE_MB} '*' 1048576)"
    fi

    # load master module
    if ! ${MODPROBE} ${MODPROBE_FLAGS} ec_master ${MASTER_ARGS} \
            main_devices=${DEVICES} backup_devices=${BACKUPS} \
            ${EOE_INTERFACES_CMD} ${EOE_AUTOCREATE_CMD} ${PCAP_SIZE_CMD}; then
        exit_fail
    fi

    # check for modules to replace
    for MODULE in ${DEVICE_MODULES}; do
        ECMODULE=ec_${MODULE}
        if ! ${MODINFO} ${ECMODULE} > /dev/null; then
            continue # ec_* module not found
        fi
        REPLACE_MODULE=false
        if [ ${MODULE} != "generic" ] && [ "${ENABLE_BINDING}" != true ] || \
           contains_element "${MODULE}" "${BIND_IGNORES[@]}"; then
            REPLACE_MODULE=true
        fi
        if [ "${REPLACE_MODULE}" = true ]; then
            if ${LSMOD} | grep "^${MODULE} " > /dev/null; then
                if ! ${RMMOD} ${MODULE}; then
                    exit_fail
                fi
            fi
        fi
        if ! ${MODPROBE} ${MODPROBE_FLAGS} ${ECMODULE}; then
            if [ "${REPLACE_MODULE}" = true ]; then
                ${MODPROBE} ${MODPROBE_FLAGS} ${MODULE} # try to restore
            fi
            exit_fail
        fi
    done

    if [ "${ENABLE_BINDING}" = true ]; then
        # load modules and unbind/bind (instead of replacing)
        [ -d $(dirname ${BIND_DEVICES}) ] || mkdir -p $(dirname ${BIND_DEVICES})

        rm ${BIND_DEVICES} 2>/dev/null # clean/rm the temp file
        MASTER_INDEX=0
        while true; do
            DEVICE=$(eval echo "\${MASTER${MASTER_INDEX}_DEVICE}")
            if [ -z "${DEVICE}" ]; then break; fi

            # assume the input is a mac-address (1st) or device name (2nd)
            DEVICE_NAME="${ND_MAC2NAME[${DEVICE,,}]}"
            if [ -z "${DEVICE_NAME}" ]; then
                DEVICE_MAC="${ND_NAME2MAC[${DEVICE}]}"
                if [ ! -z "${DEVICE_MAC}" ]; then
                    DEVICE_NAME="${DEVICE}"
                else
                    break
                fi
            fi

            # get current module used via name (i.e. eth0)
            DEVLINK=$(readlink -f /sys/class/net/${DEVICE_NAME}/device)
            MODULE=$(readlink -f ${DEVLINK}/driver/module | sed "s|.*/||") # get current module/driver used (i.e. igb)

            # replace current module with ec module if needed
            ECMODULE=ec_${MODULE}
            if contains_element "${MODULE}" "${DEVICE_MODULES[@]}" && [ "${MODULE}" != "${ECMODULE}" ]; then
                if ! ${MODINFO} ${ECMODULE} > /dev/null; then
                    exit_fail # ec_* module not found
                fi

                # add link to temp file
                echo ${DEVLINK} >> ${BIND_DEVICES}

                DEV=$(echo ${DEVLINK} | sed "s|.*/||") # get device [[[[<domain>]:]<bus>]:][<slot>][.[<func>]]
                SUB=$(readlink -f ${DEVLINK}/subsystem/drivers) # get location to other drivers for subsystem
                echo $DEV > ${DEVLINK}/driver/unbind # unbind current driver
                echo $DEV > ${SUB}/${ECMODULE}/bind  # bind ec driver
            fi
            MASTER_INDEX=$(expr ${MASTER_INDEX} + 1)
        done
    fi

    exit_success
    ;;

stop)
    echo -n "Shutting down EtherCAT master @VERSION@ "

    if [ "${ENABLE_BINDING}" = true ]; then
        # Get device links from temp file
        mapfile DEVLINKS 2>/dev/null < ${BIND_DEVICES}
        for DEVLINK in ${DEVLINKS[*]}; do
            if [ -z "${DEVLINK}" ]; then break; fi

            DEV=$(echo ${DEVLINK} | sed "s|.*/||")  # get device [[[[<domain>]:]<bus>]:][<slot>][.[<func>]]
            MODULE=$(readlink -f ${DEVLINK}/driver/module | sed "s|.*/||") # get current module used
            if [ "${MODULE:0:3}" == "ec_" ]; then
                # if current module being used has "ec_" prefix unbind it and bind it to non-ec module
                SUB=$(readlink -f ${DEVLINK}/subsystem/drivers) # get location to other drivers for subsystem
                echo $DEV > ${DEVLINK}/driver/unbind # unbind ec driver
                echo $DEV > ${SUB}/${MODULE:3}/bind  # bind non-ec driver
            fi
        done
        rm ${BIND_DEVICES} 2>/dev/null # clean/rm the temp file
    fi

    # unload EtherCAT device modules
    for MODULE in ${DEVICE_MODULES} master; do
        ECMODULE=ec_${MODULE}
        if ! ${LSMOD} | grep -q "^${ECMODULE} "; then
            continue # ec_* module not loaded
        fi
        if ! ${RMMOD} ${ECMODULE}; then
            exit_fail
        fi;
    done

    sleep 1

    # reload previous modules
    for MODULE in ${DEVICE_MODULES}; do
        RELOAD_MODULE=false
        if [ ${MODULE} != "generic" ] && [ "${ENABLE_BINDING}" != true ] || \
           contains_element "${MODULE}" "${BIND_IGNORES[@]}"; then
            RELOAD_MODULE=true
        fi
        if [ "${RELOAD_MODULE}" = true ]; then
            if ! ${MODPROBE} ${MODPROBE_FLAGS} ${MODULE}; then
                echo Warning: Failed to restore ${MODULE}.
            fi
        fi
    done

    exit_success
    ;;

restart)
    $0 stop || exit 1
    sleep 1
    $0 start
    exit
    ;;

status)
    echo "Checking for EtherCAT master @VERSION@ "

    # count masters in configuration file
    MASTER_COUNT=0
    while true; do
        DEVICE=$(eval echo "\${MASTER${MASTER_COUNT}_DEVICE}")
        if [ -z "${DEVICE}" ]; then break; fi
        MASTER_COUNT=$(expr ${MASTER_COUNT} + 1)
    done

    RESULT=0

    for i in `seq 0 $(expr ${MASTER_COUNT} - 1)`; do
        echo -n "Master${i} "

        # Check if the master is in idle or operation phase
        ${ETHERCAT} master --master ${i} 2>/dev/null | \
            grep -qE 'Phase:[[:space:]]*Idle|Phase:[[:space:]]*Operation'
        EXITCODE=$?

        if [ ${EXITCODE} -eq 0 ]; then
            print_running
        else
            print_dead
            RESULT=1
        fi
    done

    exit ${RESULT}
    ;;

*)
    echo "USAGE: $0 {start|stop|restart|status}"
    ;;

esac

if [ -r /etc/rc.status ]; then
    rc_exit
else
    exit 1
fi

#------------------------------------------------------------------------------
